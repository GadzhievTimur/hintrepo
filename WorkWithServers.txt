1) HTTP - это протокол передачи гипертекста.
HTTPS - это защищённый протокл передачи гипертекста.

HTTPS используется для шифрования данных с целью их безопасной передачи.

HTTP протокол используется для взаимодействия "клиент-сервер". В качестве клиента, в основном, выступает браузер

*******************************************************************************************

2)get, post, put, head, delete.

get-запросы используются для извлечения(представления) запрашиваемого ресурса.

post-запросы используются для отправки данных на сервер. Запрос POST обычно отправляется через форму HTML и приводит к изменению на сервере.

put запрос аналогичен post-запросу. Разница между put и post в том, что повторный вызов put-запроса без изменений, будет иметь тот же результат, тогда как post-запрос может повлечь за собой сторонние эффекты.

head-запрос возвращает только заголовки без тела. Если в результате head-запроса у заголовков будет тело, такой запрос следует игнорировать

delete удаляет указанный ресурс

*******************************************************************************************

3)header в запросе - это заголовок.
body в запросе - это тело.

*******************************************************************************************

4) Информационные 100 - 199
Успешные 200 - 299
Перенаправления 300 - 399
Клиентские ошибки 400 - 499
Серверные ошибки 500 - 599

к Основным можно отнести следующие коды:

200 - значение "ОК"
Самый популярный и важный статус. Означает, что запрос выполнен успешно в соответствии с ожиданиями пользователя — запрошенные данные или страница существуют и доступны для просмотра. Все страницы, которые мы хотим видеть в индексе поисковых систем, должны отдавать код 200 OK.

301 - значение "Moved Permanently"
Этот ответ гласит, что документ или страница были перемещены на другой адрес навсегда. Если у страницы, которая уже была в выдаче поисковых систем, изменился адрес, для сохранения трафика и ссылочного веса рекомендуется настраивать 301 редирект со старого URL-адреса на новый.

302 - значение "Found"
Документ временно перенесен на другой адрес. Этот код — сигнал о том, что удалять эту страницу из индекса не надо. По заявлению Andrew Johnson из Google, ссылочный вес при этом передается.

304 - значение "Not Modified"
Важный код с точки зрения нагрузки на сервер и количества передаваемых данных. Сервер возвращает 304 код, если в HTTP-заголовке дата последнего обновления (Last-Modified) старее, чем в запросе с заголовком If-Modified-Since. То есть, если документ не менялся с указанной даты, сервер возвращает код 304 Not Modified. В таком случае роботам поисковиков нет необходимости загружать документ повторно: он не изменился с момента их последнего визита. Фактически они получают только http-заголовки и двигаются дальше.

403- значение "Forbidden"
Отказано в доступе. Этот ответ возвращается, если пользователю запрещен доступ к данному документу. В данном случае речь не идет об HTTP-аутентификации (для таких случаев используются 401 и 407 коды). 403 код выводится, например, при входе с запрещенных IP или попытке просмотра системного файла .htaccess.

404 - значение "Not Found"
Наверное, каждый пользователь сталкивался с этим ответом. Он означает, что по данному URL ничего не найдено — документ не существует. Этот код нужно отдавать при попытке попасть на несуществующие документы. Если страница по запрашиваемому адресу существовала, но была удалена и вы хотите об этом сообщить, используйте код 410.

410 - значение "Gone"
Этот ответ говорит, что документ был окончательно удален и более недоступен. Хотя коды 404 и 410 одинаково указывают на то, что страница недоступна, в их обработке есть отличия. Обращаясь к 404 странице, поисковый робот не будет помечать её как удаленную и спустя время снова к ней обратится для уточнения информации. Чего не скажешь про 410 код. В этом случае робот точно отметит, что эта страница или документ навсегда удалены с сервера. Доверясь вебмастеру, бот не будет проверять эту страницу снова.

451 - значение "Unavailable For Legal Reasons"
В последнее время этот код встречается все чаще. Он означает, что доступ к серверу закрыт из-за его запрета на государственном уровне или по решению суда в случае нарушения авторских прав. Ошибка 451 — уточняющий вариант кода 403.

500 - значение "Internal Server Error"
Это любая внутренняя ошибка сервера, которая не описана в остальных ошибках этого класса. Происходит, если сервер столкнулся с проблемой, которая не позволяет выполнить запрос. Например, эта ошибка может возникнуть из-за ошибок в настройке файла конфигурации.

503 - значение "Service Unavailable"
Сервер временно не может обрабатывать запросы по техническим причинам. Если на сервер идет слишком много запросов и он не в состоянии с ними справиться, мы увидим именно этот ответ.

504 - значение "Gateway Timeout"
Шлюз не отвечает. Ответ появляется, если сервер работал в качестве прокси и не дождался ответа от вышестоящего сервера для завершения запроса.


*******************************************************************************************

5) Нажать кнопку F12(inspect) и перейти в раздел network.

*******************************************************************************************

6)XMLHttpRequest и Fetch API.
XMLHttpRequest это API, который предоставляет клиенту функциональность для обмена данными между клиентом и сервером. Данный API предоставляет простой способ получения данных по ссылке без перезагрузки страницы. Это позволяет обновлять только часть веб-страницы не прерывая пользователя. XMLHttpRequest используется в AJAX запросах и особенно в single-page приложениях.

Fetch API - предоставляет интерфейс для получения ресурсов (в том числе по сети), который похож на XMLHttpRequest, но является более мощным гибким набором функций.

*******************************************************************************************

7)Fetch API - предоставляет интерфейс для получения ресурсов (в том числе по сети), который похож на XMLHttpRequest, но является более мощным гибким набором функций.

Fetch API также можно назвать современной заменой XHR - недавно он был представлен в браузерах для упрощения асинхронных HTTP-запросов в JavaScript, как для разработчиков, так и для других API, которые строятся поверх Fetch.

с помощью метода fetch можно делать запросы на сервер.
делается таким образом:

const promise = fetch(url, [options])

если не задать параметр options будет выполнен простой get-запрос.
Завершение работы промиса с ошибкой означает ошибку в сети или отсутствие сайта. Ошибки с кодом 400 и 500 не являются ошибкой.

с помощью методов response.text() или response.json(). можно использовать только 1 метод для обработки ответа сервера. при использовании response.text() метод response.json() не сработает, т.к. ответ уже был обработан

