1) DOM(ОМД) - Document object model(Объектная модель документа).
С помощью DOM можно добавлять или удалять что-либо на странице

*******************************************************************************************

2)Объект window представляет собой окно, содержащее DOM документ; свойство document указывает на DOM document, загруженный в данном окне. Окно текущего документа может быть получено с помощью свойства document.defaultView.

Интерфейс Location представляет собой адрес (URL) объекта, с которым он связан. Его модификации отражаются на родительском объекте. Интерфейсы Document и Window имеют подобный Location, к которому можно получить доступ через Document.location и Window.location соответственно.

Каждая веб-страница, которая загружается в браузер, имеет свой собственный объект document. Интерфейс документа служит точкой входа для получения содержимого веб-страницы (всего DOM - дерева, включая такие элементы как <body> и <table> (en-US)), а также обеспечивает функциональность, которая является глобальной для документа, например, для получения URL-адреса страницы или создания новых элементов в документе).

*******************************************************************************************

3) Изменения в DOM можно проводить с помощью функции 'append()':

Пример добавления через функцию 'append()'. (только код js для краткости) :

let div = document.createElement('div');
div.className = 'alert';
div.innerHTML = '<strong> Hi, everyone! </strong> you just read important message! ';
document.body.append(div);

для удаления элементов применяется функция 'remove()'
пример:
div.remove();

для изменения css применяется метод style.

пример:
document.body.style.background = 'blue'; //можно задать и так #000080

*******************************************************************************************

4)Стандарт DOM предусматривает несколько средств поиска элемента. Это методы getElementById, getElementsByTagName и getElementsByName.

Все методы "getElementsBy*" возвращают живую коллекцию. Такие коллекции всегда отражают текущее состояние документа и автоматически обновляются при его изменении.

метод querySelector() возвращает первый элемент (Element) документа, который соответствует указанному селектору или группе селекторов. Если совпадений не найдено, возвращает значение null.

Метод querySelectorAll() возвращает статический (не динамический) NodeList, содержащий все найденные элементы документа, которые соответствуют указанному селектору.

Самый быстрый поиск происходит с помощью getElementById, потому что перебираются только селекторы с id, а не все сразу.

getElementById находит элемент по id. если элемент с таким id отсутствует, метод getElementById вернёт null.

getElementsByTagName возвращает HTMLCollection элементов с указанным именем тега. Поиск осуществляется по всему документу, включая корневой узел. Возвращаемая HTMLCollection живая, это значит, что она автоматически обновляет сама себя, чтобы оставаться синхронизированной с DOM деревом без необходимости вызова document.getElementByTagName() снова.

getElementsByName возвращает коллекцию элементов с найденными именами.
если элементов с заданным именем нет, возвращается пустая коллекция.

*******************************************************************************************


5)есть множество обработчиков событий, которые выполняют определённые задачи.

Событие - это сигнал от браузера о том, что были произведены какие-то действия. Из пользовательских событий можно отметить:
нажатие ЛКМ, нажатие ПКМ, нажатие СКМ, прокрутка колёсика мыши вверх/вниз, движение мыши, движение мыши с зажатыми кнопками мыши (ЛКМ/ПКМ/СКМ). Также можно сюда отнести и отправку формы или фокусировку пользователя на чём-либо или когда пользователь нажимает / отпускает клавишу.

Для каждого события есть обработчики.
-click => нажатие ЛКМ;
-contexmenu => нажатие ПКМ;
-mouseove/mouseout => наведение указателя мыши на/от объект(-а);
-mousedown/mouseup => нажатие/отжатие кнопки мыши;
-mousemove => движение мыши;
-submit => отправка формы;
-focus => фокусировка пользователя на чём-либо;
-keydown/keyup => нажатие и отжатие клавиши на клавиатуре.

