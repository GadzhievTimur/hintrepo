1) Функция – это именованный фрагмент кода, к которому можно обратиться в нужных местах программы по имени. Существует 2 вида задания функции: стрелочный и обычный.

Стрелочный:
let func = (firstName, surName, age) => [firstName, surName, age];
alert(func('Timur', 'Gadzhiev', '20'))

Обычный:
let func2 = function(firstName, surName, age){
return [firstName, surName, age];
}
alert(func2('Timur', 'Gadzhiev', '20'))

Функции относятся к типу данных function, если верить выводу через typeof()
Однако функция является объектом, потому что у функции имеются свойства и методы.

****************************************************************

2)Стрелочная функция = краткая запись обычной функции.

Стрелочный вид:
let func = (firstName, surName, age) => [firstName, surName, age];
alert(func('Timur', 'Gadzhiev', '20'))

Обычный вид:
let func2 = function(firstName, surName, age){
return [firstName, surName, age];
}
alert(func2('Timur', 'Gadzhiev', '20'))

Обе функции выполняют одно и то же.

Выражение стрелочных функций не позволяют задавать имя, поэтому стрелочные функции анонимны, если их ни к чему не присвоить.

стрелочные функции можно задать и таким образом:

params => ({name: 'Timur'})


*****************************************************************

3)Анонимные функции - это функции, которые ни к чему не присвоены.
Анонимные функции либо вызываются напрямую, либо вызываются с помощью переменных, к которым их привязывают.

пример обычной анонимной функции:

let func = function(name, age){
return name + age
}
alert(func('Timur ', 20)) //Timur 20

пример стрелочной анонимной функции:

let func = (name, age) => [name, age];
alert(func('Timur ', '20')) //Timur 20

****************************************************************

4)При вызове функции порядок аргументов важен, т.к. каждому значению соответствует свой аргумент, который автоматически подставляется к аргументу, исходя из его расположения.

Если написать код таким образом:

let func = function(name, surname, age, accupation){
return {Name : name, Surname : surname, Age : age, Accupation : accupation}
}
alert(JSON.stringify(func(21, 'Timur', 'Programmer', 'Gadzhiev')))

то получится следующее:

{"Name":21,"Surname":"Timur","Age":"Programmer","Accupation":"Gadzhiev"}

Объект arguments — это подобный массиву объект, который содержит аргументы, переданные в функцию. ... Примечание: "Подобный массиву" означает, что arguments имеет свойство length , а элементы индексируются начиная с нуля.


***************************************************************

5)Замыкание - это функция, которая запоминает свои внешние переменные и может получить к ним доступ. В JS все функции имеют замыкание. То есть, они автоматически запоминают, где были созданы, с помощью скрытого свойства и все они могут получить доступ к внешним переменным. замыкание - это также функция + ссылка на текущую цепочку scope-объектов, которое создается при определении функции.

Замыкания полезны тем, что позволяют связать данные (лексическое окружение) с функцией, которая работает с этими данными.

Замыкания могут быть использованы в ООП, где объекты позволяют нам связать некоторые данные (свойства объекта) с одним или несколькими методами.



*****************************************************************

6)callback - это функция, которая должна быть выполнена после выполнения предыдущей. callback используется по той причине, что в JS код выполняется асинхронно и, если у нас есть 2 функции, одна из которых не может быть выполненна в данный момент, то порядок вывода может быть нарушен.

к примеру можно взять 2 функции, одна из которых отправляет запросы на сервер и ждёт ответ, а вторая выводит что-либо. Имитацию работы асинхронности можно выполнить с помощью функции setTimeout()

function first(){
setTimeout( function(){
console.log(1);
}, 500 );
}
function second(){
console.log(2);
}
first();
second();

Этот код сначала выведит 2, а потом 1, т.к. JS не дожидается ответа от функции.

Чтобы выполнить код последовательно, используются callback-и.

function first(callback){
setTimeout( function(){
}, 500 );
callback();
}

function second(){
console.log(2);
}
first(function(){
console.log('What I have done?')
});
second();

Выведит сначала сообщение 'What I have done?', а затем только "2"



