1)git был создан создателем Linux, чтобы другие разработчики могли
внести свой вклад в ядро Linux. Сейчас git используется для
отслеживания изменений в файлах и совместной работы над одним
проектом


2)git - это инструмент, позволяющий реализовать распределённую
систему контроля версий, а github - сервис онлайн-хостинга
репозиториев, обладающий всеми функциями распределённого контроля
версий (git)


3)working directory - это рабочая папка,
которая отслеживается git-ом. в этой папке автоматически
добавляется скрытая папка .git, в которой хранятся метаданные
из git. Чтобы обычная папка, расположенная на компьютере стала
рабочей, необходимо дать git-у команду об отслеживании.

staging area - это файл, расположенный в рабочей папке.
git не видит этот файл до тех пор, пока не будет дана команда
о добавлении последнего. Это делается для отслеживания измений
в файле. В основном, в staging area располагаются файлы перед
публикацией, которая выполняется отдельной командой.

repository - это конечная стадия работы с файлами. Другими
словами поледняя версия файлов. На GitHub отправляютсярепозитории


4)Ветка - это указатель на один из commit-ов в git-е.
По умолчанию ветка называется master. После каждого commit ветка
master будет указывать на последний commit.

Ветки создаются командой git branch name.
Чтобы переключиться на другую ветку, используется команда:
git checkout name
Чтобы сделать commit, используется команда:
git commit -a -m 'Type your commit'


5)После изменений в файле, делаем следующее:
git add file.txt
git status


6)с помощью команды git diff --name-only--cached


7)Во-первых, делаем изменения в file.txt
Во-вторых, делаем:
git add file.txt
git commit -a -m 'Type your commit'

В случае необходимости внесения изменений, не обязательно делать
отдельный commit. Меняем commit следующим образом:
Исправляем всё, что необходимо и снова выполняем:
git add file.txt
git commit -a -m "Type your commit"


8)с помощью команды git clone


9)в файл .gitignore добавляются файлы конфигурации
(обычно с паролями), временные файлы и папки. Он нужен для скрытия
файлов и папок от системы контроля версий git


10)с помощью команды git push <remote name> <branch name>
например, git push homework master


11)с помощью команды git fetch name
например, git fetch origin


12)чтобы сразу перейти на новую ветку при её создании,
используется команда git checkout -b name (в старых версиях)
и git switch -c name

git checkout master, чтобы вернуться обратно в master


12)git branch без параметров выводит список веток и выделяет
текущую с помощью символа *


13)Для объединения веток, необходимо переключиться в ту,
в которую необходимо выполнить объединение и выполнить команду
merge. Например нам нужно в ветку master "влить" ветку fixes,
то выполняем следующее:

git checkout master
git merge fixes

после объединения веток, ветку fixes можно удалить с помощью
команды git branch -d fixes.

Конфликты случаются в результате изменения одного и того же файла
в одном и том же месте, но по-разному в двух объединяемых ветках.
Объединение и commit не будут выпонены до тех пор, пока не будет
разрешён конфликт. commit не выполняется, чтобы можно было
отследить, какие файлы не были объеденены с помощью команды
git status.


14)origin - это имя удалённого репозитория, которое задаётся
git-ом по умолчанию после проведения клонирования.

Чтобы поменять адрес репозитория, необходимо выполнить команду:
git remote set-url origin git@github...


15)Если нужно сделать откат без сохранения изменений,
то выполняем git reset --hard (type your commit without these brackets)
Если нужно сделать откат с сохранением изменений,
то выполняем git stash, а после первую команду


16)с помощью команды git log


17)Для удаления локальной ветки, выполняется следующая команда:
git branch -d branchname

Для удаления ветки в репозитории на github, выполняется следующая команда:
git push RemoteRepositoryName --delete branchname


18)Pull Request-ом называют слияние изменений.
Например я скачал код с GitHub и увидел, где я могу его
модифицировать (добавить функционал или убрать некоторые баги),
после выполненных изменений, отправляю код "хозяину", чтобы
последний выполнил объединение с помощью git pull