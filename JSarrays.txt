1)массив - это список. списки задаются с помощью квадратных
скобок или с помощью метода Array(). Например,

let myList = []
или
let myList = Array ()

***********************************************************

2)pop и push работают с последними элементами массива.
shift и unshift работают с первым (нулевым) элементом массива.

Чтобы добавить элемент в конец массива, используется метод push.
Например,

let myList = ["Я", "ты", "он" , "она"]
alert (myList ) //Я,ты,он,она
myList.push('мы')
alert(myList) //Я,ты,он,она,мы

с помощью метода pop можно удалить последний элемент из массива.
Например,

let myList = ["Я", "ты", "он" , "она"]
myList.pop()
alert(myList) //Я,ты,он

Чтобы удалить первый элемент массива, используется shift.
Например,

let myList = ["Я", "ты", "он" , "она"]
myList.shift()
alert(myList) //ты,он, она

Чтобы добавить элемент в начало списка, используется метод unshift.
Например,

let myList = ["Я", "ты", "он" , "она"]
myList.unshift('Мы')
alert(myList) //Мы,Я,ты,он,она

*****************************************************************

3)индексы массива указываются в квадратных скобках [].
Например,
let firstWord = ['Hello', 'Dad', 'Mom']
alert(firstWord[0]) //Hello

Также можно удалять или находить элементы в массивах. Например,

let firstWord = ['Hello', 'Dad', 'Mom'] //создаём список
let indexOfDelWord = firstWord.indexOf('Dad') //находим индекс искомого слова
alert(indexOfDelWord) //выводим индекс искомого слова (1)
firstWord.splice(indexOfDelWord, 1) //удаляем слово, указав его индекс
alert(firstWord) //Конечный вариант списка - Hello,Mom

!!!Примечание!!!
В скобках, в методе splice, указывается start и end (indexOfDelWord, 1)
если вместо 1 указать 2, то из списка удалится и следующий элемент.
В случае, если список большой, то удалятся все элементы от начала
до конца заданного диапазона. Например,

let firstWord = ['Hello', 'Dad', 'Mom', 'Cat', 'Dog']
let indexOfDelWord = firstWord.indexOf('Dad')
alert(indexOfDelWord)
firstWord.splice(indexOfDelWord, 2)
alert(firstWord) //Hello,Cat,Dog
firstWord.splice(indexOfDelWord, 3)
alert(firstWord) //Hello,Dog


***********************************************************

4)Указывает на длину строки или массива.
Например,

let wordList = ['Cat', 'Dog', 'Duck', 'Bird']
let words = 'Hello, I am a program'
alert(wordList.length) //выведет 4, т.к. у нас 4 элемента в массиве
alert(words.length) //21 символ с учётом пробелов, т.к. они тоже

*************************************************************

5)метод slice - используется для возврата элементов в списке в
заданном диапазоне, не включая последний .

Пример:

let words = ['Hello', 'boys', 'how', 'are', 'you', 'doing', '?']
alert(words.slice(0, 4)) // Hello,boys,how,are --> you не выводится, т.к. этот элемент расположен под 4 индексом.

метод splice позволяет удалять элементы в массивах в
заданном диапазоне. 

Пример:

let firstWord = ['Hello', 'Dad', 'Mom'] //создаём список
let indexOfDelWord = firstWord.indexOf('Dad') //находим индекс искомого слова
alert(indexOfDelWord) //выводим индекс искомого слова (1)
firstWord.splice(indexOfDelWord, 1) //удаляем слово, указав его индекс как начальный, вторым аргументом задаётся конечный индекс.
alert(firstWord) //Конечный вариант списка - Hello,Mom

метод map позволяет выполнять действия с массивом с
использованием итераций.

Пример:

let numbers = [1, 4, 9, 16]
alert(numbers.map(Math.sqrt)) //1,2,3,4

Также с помощью map можно задать функцию. 

Пример с функцией:

let numbers = [1, 4, 9, 16];
alert(numbers.map(Math.sqrt)); //1,2,3,4
let doubles = numbers.map(function(num) {
return num * 2; //2, 4, 6, 8

forEach проводит итерации по массиву и вызывает функцию callback
для каждого элемента, передавая параметры (item, i, arr), где

item - элемент в массиве
i - его индекс
arr - сам массив

Пример:

let array = ['Hello', 'boys', 'how', 'are', 'you', 'doing', '?'];

array.forEach(function (element){
console.log(element);
})

Метод forEach ничего не возвращает, его используют только для
перебора, как более «элегантный» вариант, чем обычный цикл for.

метод filter используется для фильтрации массива через функцию и
возвращает только те элементы, которые при вызове
callback(item, i, arr) выведут true.

Пример:

let myList = [1, -1, 2, -2, 3, 0];

let positiveList = myList.filter(function(number) {
return number >= 0;
});

alert( positiveList ); // 1,2,3,0

метод reduce используется для последовательной обработки каждого
элемента массива с сохранением промежуточного результата.

Метод reduce используется для вычисления на основе массива
какого-либо единого значения.

Он применяет функцию callback по очереди к каждому элементу
массива слева направо, сохраняя при этом промежуточный результат.

Аргументы функции callback(previousValue, currentItem, index, arr):

previousValue – последний результат вызова функции, он же
«промежуточный результат».

currentItem – текущий элемент массива, элементы перебираются по
очереди слева-направо.

index – номер текущего элемента.

arr – обрабатываемый массив.


Пример:

let myList = [5, 8, 3, 12, 7]
let result = myList.reduce(function(first, next){
return first + next;
}, 0)
alert(result);

в строке "}, 0)" 0 - это начальное значение. оно может меняться
при необходимости. если вместо 0 написать 1, то значение
увеличится а 1 и т.д.

метод sort работает с юникодом, поэтому, если нужно отсортировать
список, состоящий из чисел, нужно выполнить дополнительные
действия.

Пример:

let myNumList = [50, 4, 33, 88, 1, 11, 123]

alert(myNumList.sort()) //1,11,123,33,4,50,88
alert(myNumList.sort((a, b) => a-b)) //1,4,11,33,50,88,123
alert(myNumList.sort((a, b) => b-a)) //123,88,50,33,11,4,1

/* Для сортировки в алфавитном порядке достаточно простой 
сортировки. */

let myStrList = ['a', 'c', 'd', 'e', 'q', 'r', 'w', 'b']
alert(myStrList.sort()) //a,b,c,d,e,q,r,w

методы some и every используются для проверки массива. они
выводят true или false в зависимости от соответствия условию.

метод some выводит true в случае, если хоть 1 элемент
удовлетворяет условие, а метод every ТОЛЬКО в случае, если
каждый элемент удовлетворяет условие.

Пример:

let myList = [1, -1, 2, -2, 3];

function isPositive(number) {
return number > 0;
}

alert( myList.every(isPositive) ); // false, не все положительные
alert( myList.some(isPositive) ); // true, есть хоть одно положительное