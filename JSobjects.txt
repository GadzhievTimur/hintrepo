1)Объект - это пара ключ : значение.
Объекты, чаще всего, задаются с помощью фигурных скобок {}
В отличии от других типов данных, объекты могут содержать в себе несколько значений. Поиск значений проходит по ключу через точку.

пример:

let user = {name : "John",
age : 16};

alert(user.name) // John;
alert(user.age) //16;

Для удаления свойства мы можем использовать оператор delete:
delete user.age;

Для свойства объекта нет ограничений по заданию имён. можно использовать функциональные слова.

Пример:

let obj = {
for: 1,
let: 2,
return: 3
};

alert( obj.for + obj.let + obj.return ); // 6


******************************************************


2)Объект создаётся с помощью фигурных скобок {}

******************************************************

3)Чтобы добавить свойство в объект, используется обычное
присваивание.

пример:

let user = {name : "John",
age : 16};

user.surname = 'Smith'

//Теперь объект будет выглядеть так: {name: "John",
age: 16,
surname: "Smith"}

**********************************************************

4)с помощью delete.

пример:

let user = {name : "John",
age : 16};

delete user.age;

//Теперь объект будет выглядеть так: {name: "John"}

*************************************************************

5)С помощью кавычек.

let person = {name: "John",
surname: "Smith",
age: 16,
"What is hobbies?": 'programming'}

************************************************************

6)let obj = {me : 'first',
he: 'second',
she: 'third',
it: 'fourth'}

value = obj.me
delete obj.me
obj.name = value

console.log(obj)

************************************************************

7)Метод object.create() Создаёт новый объект с указанными
объектом прототипа и свойствами.

************************************************************

8)Деструктуриция разбивает объект на составные части.
Это также особый синтаксис присваивания, при котором можно присвоить объект сразу нескольким переменным, разбив его на части.

Пример:

let options = {
title: "Меню",
width: 100,
height: 200
};

let {title, width, height} = options;

alert(title); // Меню
alert(width); // 100
alert(height); // 200

ещё есть другой пример с присваиванием с другим именем для объекта.

Например:

let options = {
title: "Меню",
width: 100,
height: 200
};

let {width: w, height: h, title: t} = options;

alert(t); // Меню
alert(w); // 100
alert(h); // 200

**************************************************************

9)Преобразовать объект в строку и выполнить сравнение строк. Такой метод не найдёт соответствия, если в обоих объектах не будет соответствия как в содержании, так и в порядке.

Например:

const object1 = {
id: 1,
title: "Title"
};

const object2 = {
id: 1,
title: "Title",
};

const object3 = {
title: "Another title",
id: 3
};

console.log(JSON.stringify(object1) === JSON.stringify(object2)); //true
console.log(JSON.stringify(object2) === JSON.stringify(object3)); //false
console.log(JSON.stringify(object1) === JSON.stringify(object3)); //false

Но если поменять в object1 id и title местами, вернётся false, т.к. не будет соответствия в порядке.

Например:

const object1 = {
title: "Title",
id: 1
};

const object2 = {
id: 1,
title: "Title",
};

const object3 = {
title: "Another title",
id: 3
};

console.log(JSON.stringify(object1) === JSON.stringify(object2)); //false
console.log(JSON.stringify(object2) === JSON.stringify(object3)); //false
console.log(JSON.stringify(object1) === JSON.stringify(object3)); //false

**************************************************************

10)Объекты, в отличии от других типов данных копируют адрес в памяти.
Другими словами когда переменная объекта копируется – копируется ссылка, сам же объект не дублируется.

В случае копирования объекта таким образом:

let obj = {
name : 'Timur',
id : 1
}

b = obj
b.id = 2

console.log(b) // id:2
console.log(obj) // id:2

ключ id будет иметь значение 2 в обоих случая, т.к. идёт ссылка на 1 адрес в памяти и в таком случае обе переменные имеют доступ к 1 адресу, при изменении значения в одной из них, изменится значение в обеих.

В случае клонирования объекта таким образом, создаётся независимый клон объекта, при изменении значений в котором, изменений в начальном объекте не произойдёт.

let obj = {
name: "Timur",
id : 1
};

let cloneObj = {};

for (let key in obj){
cloneObj[key] = obj[key];
}

cloneObj.name = "Иван";
console.log(obj.name); // Timur
console.log(cloneObj.name); //Иван