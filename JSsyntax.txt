1)var и let - это по сути одно и тоже. var - устаревший вариант.
Сейчас переменные задаются с помощью let и const.

Const - это константа, это переменная, которая не изменяется.
Переменную объявляют с помощью const в тех случах, когда точно
известно, что туда вводить и то, что она не изменится.

let - это переменная с блочной областью видимости с возможностью
инициализировать её значением, которую можно в дальнейшем
переприсвоить


2)if (x === 1){
alert('Hello')
}
else if (x === 2){
alert ('Hi')
}
else {alert('Buy')}



3)цикл while:

let x = 1024;
while(x > 2){
document.write(x);
x /= 2;
}

цикл for:
for (let i = 0; i < 3; i++){
alert(i);
}

цикл do while:

do{
alert(x);
x /= 2;
}while x > 2;

Досрочно выйти из цикла можно с помощью команды break
Перейти к следующей итерации можно с помощью команды continue



4)функции задаются так:

function myFunc (a, b) {return a + b ;}
myFunc (10, 20)

функциональные выражения задаются следующим образом:

let myFunc = function () {return a + b;}
myFunc (10, 20)

Различия функций и функциональных выражениий в способах их вызова
Разница между ними также в том, что функция обрабатывается
интерпретатором в первую очередь, поэтому функцию можно вызвать
ещё до того как она была объявлена в коде.
Функциональное выражение, как и прочие переменные, обрабатывается
по мере выполнения кода.

Именованные функции - это функции, которым присвоено имя внутри
переменной. Например, let myFunction = function myFunc()...
Чаще всего используется для выполнения рекурсии. Также
именованную функцию нельзя перезаписать. Имя функционального
выражения доступно только внутри самой функции.


5)"==" это оператор сравнения.
"===" это оператор строгого сравнения
"=" это оператор присваивания

Разница между "==" и "===" в том, что "==" с преобразованием,
а "===" по типу данных


6)оператор, вызывающий сам себя



7)try{
throw 'myException';
}
catch(e){
logMyErrors(e)
}

Также есть блок finally, который выполняется в любом случае